编译器编译分为几个步骤：
    1.词法分析
    2.语法分析
    3.语义分析
    4.中间代码生成
    5.代码优化
    6.目标代码生成

解释：
1.词法分析：
    由词法分析器根据词法规则识别源程序中的记号，也就是单词。有a.关键字，如int，for;b.标识符，如变量名;
    c.字面量，如69,hello等;d.特殊符号，如运算符等。
    例如：C语言 int a，b, c; a = b + c * 60;
    翻译成：int id1, id2, id3; id1 = id2 + id3 * 60;
2.语法分析：
    语法分析器根据语法规则识别出记号流中的结构, 并且能够构建成语法树（是一种后缀表达式，用栈结构存储）.
    语法树的语法结构一般是二叉树.
    栈内的顺序(入栈从左到右):id1 id2 ，id3 ，
    栈内的顺序(入栈从左到右):id3 60  * id2 + id3 =
3.语义分析：
    语义分析器根据语义规则对语法树中的语法单元进行静态语义检查(如类型检查和转换等), 这个过程类似于理解句子
    的意思并且进行一些修正。
4.中间代码生成：
    中间代码生成器根据语义分析器的输出生成中间代码, 中间代码可以有若干种形式, 最常用的是三地址码的一种实
    现形式(四元式).

    四元式: (序号)(op, x, y, result)
    如: result := x op y
    其中op代表操作方式, result代表结果, 以下就是语义分析器输出的语法树生成的四元式
    (1) (itr,60, ,T1) // 将60转换为60.0并放入T1中
    (2) (*,id3,T1,T2) // 将Z*T1的结果放入T2中
    (3) (+,id2,T2,T3) // 将Y+T2的结果放入T3中
    (4) (:=,T3, ,id1) // 将T3的结果放入id1中
5.代码优化:
    由于生成的中间代码在时间和空间上有很大的浪费, 所以优化代码是很有必要的.
    比如上面的(1)代码这个转化的过程在编译中可以完成, 所以可以省略. 再比如(4)代码中, 我们可以直接将结果放
    到x中, 所以这步也可以省略.

    所以中间代码只剩下了

    (1) (*,id3,60.0,T1) // 将Z*60.0的结果放入T2中
    (2) (+,id2,T1,id1) // 将Y+T2的结果放入T3中
6.目标代码生成器
    下面就是生成的汇编指令
    MOVF    id3,   R2
    MULF    #60.0,   R2
    MOVF    id2,   R1
    ADDF    R2,   R1
    MOVF    R1,  id1
    生成目标代码时需要考虑以下几个问题: 计算机的系统结构, 指令系统, 寄存器的分配以及内存的组织等.

    编译器生成的目标代码可以有多种形式:
        汇编语言形式
        可重定位二进制代码形式
        内存形式

